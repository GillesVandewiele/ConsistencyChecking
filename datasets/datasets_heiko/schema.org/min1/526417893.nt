_:node3c933aa411e1efd5e077c084cb4932e2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> .
_:node4cbc42d2cfcf755bd4074c07239fb9 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Comment> .
_:node4cbc42d2cfcf755bd4074c07239fb9 <http://schema.org/dateCreated> "2008-10-30"^^<http://www.w3.org/2001/XMLSchema#date> .
_:node4cbc42d2cfcf755bd4074c07239fb9 <http://schema.org/author> _:node3c933aa411e1efd5e077c084cb4932e2 .
_:node4cbc42d2cfcf755bd4074c07239fb9 <http://schema.org/url> "http://forum.spring.io/forum/spring-projects/aop/54611-transaction-aop-on-an-advice-bean-doesn-t-work"@en-us .
_:node4cbc42d2cfcf755bd4074c07239fb9 <http://schema.org/text> "\nSpring functions as designed there. Reference documentation describes that case - 3.7.1. Customizing beans using BeanPostProcessors:\n\n\n\n\nBeanPostProcessors and AOP auto-proxying\n\nClasses that implement the BeanPostProcessor interface are special, and so they are treated differently by the container. All BeanPostProcessors and their directly referenced beans will be instantiated on startup, as part of the special startup phase of the ApplicationContext, then all those BeanPostProcessors will be registered in a sorted fashion - and applied to all further beans. Since AOP auto-proxying is implemented as a BeanPostProcessor itself, no BeanPostProcessors or directly referenced beans are eligible for auto-proxying (and thus will not have aspects 'woven' into them.\n\n\nHere your 'sessionExpiryAspect' directly references 'sessionManager' bean, hence transactional aspect is not woven to the 'sessionManager'.\n\nThere is a number of options to resolve the problem. For example, you can introduce a dedicated advice like:\n\nCode:\npublic class ExpirationAdvice {\n\n\tprivate SessionManager sessionManager;\n\n\tpublic void invalidateSessions(User user) {\n\t\tsessionManager.invalidateSessions(user);\n\t}\n\n\tpublic void setSessionManager(SessionManager sessionManager) {\n\t\tthis.sessionManager= sessionManager;\n\t}\n}\nand use that advice at aspect configuration:\n\nHTML Code:\n    <bean id=\"expirationAdvice\" class=\"ExpirationAdvice\">\n        <property name=\"sessionManager\" ref=\"sessionManager\"/>\n    </bean>\n\n    <!-- automatic session expiry when User's roles change or if they are disabled -->\n    <aop:config>\n        <aop:aspect id=\"sessionExpiryAspect\" ref=\"sessionManager\" order=\"3\">\n            <aop:after\n                pointcut=\"execution(* foo.service.UserManager.disableUser(foo.model.User)) and args(user)\"\n                arg-names=\"user\"\n                method=\"invalidateSessions\"\n            />\n            <aop:after\n                pointcut=\"execution(* foo.service.UserManager.update*Roles(foo.model.User,..)) and args(user,..)\"\n                arg-names=\"user\"\n                method=\"invalidateSessions\"\n            />\n        </aop:aspect>\n    </aop:config>\nAnother solution is to weave one or both of conflicting aspects via aspectj weaver.\n"@en-us .
_:nodeefd66212a6f9c77867bee572a6b16e21 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Comment> .
_:nodeefd66212a6f9c77867bee572a6b16e21 <http://schema.org/dateCreated> "2008-10-30"^^<http://www.w3.org/2001/XMLSchema#date> .
_:nodeefd66212a6f9c77867bee572a6b16e21 <http://schema.org/author> _:node1f1513c3b79592dc61f7a11b27c2c144 .
_:nodeefd66212a6f9c77867bee572a6b16e21 <http://schema.org/url> "http://forum.spring.io/forum/spring-projects/aop/54611-transaction-aop-on-an-advice-bean-doesn-t-work"@en-us .
_:nodeefd66212a6f9c77867bee572a6b16e21 <http://schema.org/text> "\nGreat explanation Denis, thanks a lot. This makes sense to me now.\n"@en-us .
_:node1f1513c3b79592dc61f7a11b27c2c144 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> .
_:node7915189b2b3e4289b25888945692ab <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/CreativeWork> .
_:node7915189b2b3e4289b25888945692ab <http://schema.org/url> "http://forum.spring.io/forum/spring-projects/aop/54611-transaction-aop-on-an-advice-bean-doesn-t-work"@en-us .
_:node7915189b2b3e4289b25888945692ab <http://schema.org/text> "\nI have transaction advice declared on methods of sessionManager:\n\nCode:\n    <aop:config>\n        <aop:advisor id=\"sessionManagerTx\" \n            advice-ref=\"sessionManagerTxAdvice\" \n            pointcut=\"execution(* foo.system.SessionManager.*(..))\" order=\"0\"/>\n    </aop:config>\n    \n     \n    <tx:advice id=\"sessionManagerTxAdvice\">\n        <tx:attributes>\n            <tx:method name=\"*\" propagation=\"REQUIRED\" rollback-for=\"Exception\"/>\n        </tx:attributes> \n    </tx:advice>\n\n    <bean id=\"userSessionLogger\" class=\"foo.webapp.listener.UserSessionLogger\">\n        <property name=\"sessionManager\" ref=\"sessionManager\"/>\n    </bean>\n\n    <bean id=\"sessionManager\" class=\"foo.system.SessionManagerImpl\">\n        <property name=\"sessionDao\" ref=\"sessionDao\"/>\n        <property name=\"userDao\" ref=\"userDao\"/>\n        <property name=\"sessionRegistry\" ref=\"sessionRegistry\"/>\n    </bean>\nThat works fine, whenever the userSessionLogger picks up HttpSessionEvents, it writes to the DB within a transaction. Now if I add my own custom AOP as shown below, that uses the sessionManager as advice methods (SessionManager.invalidateSessions), the userSessionLogger no longer uses a proxied instance of SessionManagerImpl:\n\nCode:\n    <!-- automatic session expiry when User's roles change or if they are disabled -->\n    <aop:config>\n        <aop:aspect id=\"sessionExpiryAspect\" ref=\"sessionManager\" order=\"3\">\n            <aop:after\n                pointcut=\"execution(* foo.service.UserManager.disableUser(foo.model.User)) and args(user)\"\n                arg-names=\"user\"\n                method=\"invalidateSessions\"\n            />\n            <aop:after\n                pointcut=\"execution(* foo.service.UserManager.update*Roles(foo.model.User,..)) and args(user,..)\"\n                arg-names=\"user\"\n                method=\"invalidateSessions\"\n            />\n        </aop:aspect>\n    </aop:config>\nThe userManager bean is declared in another file. If I remove the above aop, userSessionLogger uses a proxied instance of SessionManagerImpl. What's going on? I'm using Spring 2.5.2.\n"@en-us .
_:node7915189b2b3e4289b25888945692ab <http://schema.org/author> _:node8c108bc9a798e0d58d53718811dc8675 .
_:node7915189b2b3e4289b25888945692ab <http://schema.org/dateCreated> "2008-10-29"^^<http://www.w3.org/2001/XMLSchema#date> .
_:node7253b595f2e24aec6de3894b7fb6bdf <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/WebPage> .
